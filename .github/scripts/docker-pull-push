#!/bin/bash

# -------------------------------------------------
# This idempotent script...
# 1. IF no -f (force) option, exits if it can pull
#    the push image
# 2. Pulls the image named in  the first argument
# 3. Renames the image to the second argument
# 4. Pushes it to the repository
# (./.github/scripts/docker-pull-and-push 
#  my-image:mytag new-my-image:new-my-tag)
#
# - Pulls and Pushes to Docker Hub Repository
# - Assumes logged into Docker Hub
# - Assumes a Dockerfile in the root directory
# -------------------------------------------------

usage() {
  echo "Usage: $0 [-f] image_to_pull image_to_push"
}

err_exit() {
  local err_msg="$1"
  local err_code=$2
  echo "${err_msg}  --  Exit:[${err_code}]" 1>&2
  usage
  exit $err_code
}

# --- MAIN --- #
# Exit script on any errors
set -e

# Handle options
while getopts ":f" options; do
  case "${options}" in
    f)
      echo "FORCE pull and push"
      FORCE=true
      ;;
    \?)
      err_exit "Invalid Option: -$OPTARG" 1
      ;;
  esac
done
shift $((OPTIND-1))

# Pull image name argument is required
if [ -z "$1" ]; then
  err_exit "Error: You must specify an image name to pull (and push)." 86
fi
pull_image="$1"

# Push image name argument is required
if [ -z "$2" ]; then
  err_exit "Error: You must specify an image name to push." 87
fi
push_image="$2"

echo 'Docker version...'
docker --version

# If Not Force, Exit successfully if image already exists
if [ -z "$FORCE" ]; then
  echo "Attempting to pull image to push [${push_image}]..."
  set +e
  if docker pull ${push_image}; then
    echo 'Image to push already exists. Exiting successfully'
    exit 0
  fi
  set -e
fi

echo "Pulling and pushing new image [${IMAGE_NAME}]"

echo "Pulling image: [${pull_image}]..."
docker pull ${pull_image}

echo "Renaming image [${pull_image}] to [${push_image}]..."
docker tag ${pull_image} ${push_image}

echo "Pushing image [${push_image}]..."
docker push ${push_image}
