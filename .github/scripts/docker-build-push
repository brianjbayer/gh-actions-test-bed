#!/bin/bash

# -----------------------------------------------------
# This idempotent script builds and pushes the image
# named in the first argument if it does not already
# exist in the remote comtainer registry
# (./.github/scripts/docker-build-push my-image:mytag)
#
# - Optional specify a $DOCKER_BUILD_TARGET
# - Uses Docker Buildkit
# - Pushes to Docker Hub Repository
# - Assumes logged into Docker Hub
# - Assumes a Dockerfile in the root directory
# -----------------------------------------------------

usage() {
  echo "Usage: $0 [-f] image_to_build_and_push"
}

err_exit() {
  local err_msg="$1"
  local err_code=$2
  echo "${err_msg}  --  Exit:[${err_code}]" 1>&2
  usage
  exit $err_code
}

# --- MAIN --- #
# Exit script on any errors
set -e

# Image name argument is required
if [ -z "$1" ]; then
  err_exit "Error: You must specify an image name." 86
fi
IMAGE_NAME="$1"

echo 'Docker version...'
docker --version

# Exit successfully if image already exists
echo "Attempting to pull image [${IMAGE_NAME}]..."
set +e
if docker pull ${IMAGE_NAME}; then
  echo 'Image already exists, exiting successfully'
  exit 0
fi
set -e

echo "Building and pushing new image [${IMAGE_NAME}]"

# Use Docker buildkit for build
DOCKER_BUILDKIT=1

# Optionally specify a multistage build target in docker build
if [ -z "$DOCKER_BUILD_TARGET" ]; then
  docker_build_command="docker build --no-cache -t ${IMAGE_NAME} ."
else
  docker_build_command="docker build --no-cache --target ${DOCKER_BUILD_TARGET} -t ${IMAGE_NAME} ."
fi

echo "Building image: [${docker_build_command}]..."
${docker_build_command}

echo "Pushing image [${IMAGE_NAME}]..."
docker push ${IMAGE_NAME}
